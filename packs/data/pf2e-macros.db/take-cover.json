{
    "_id": "jO4Ipjz3BGo6ZzG9",
    "actorIds": [],
    "author": "lO8uxG8O9SiAPpi1",
    "command": "function CoverMacro() {\n    if (!actor) {\n        ui.notifications.warn(\"You must have an actor selected.\");\n        return;\n    }\n    coverDialog(actor).render(true);\n}\n\nfunction coverDialog(pc) {\n\n  const optsCover = [\n      {name: \"Lesser\"},\n      {name: \"Standard\"},\n      {name: \"Greater\"},\n      {name: \"Clear\"},\n  ]    \n  let coveringUp;\n\n  let content = `<p><strong>Character:</strong> ${pc.name}<br/>`;\n  content += '</p>';\n  content += '<hr/>';\n  content += '<div class=\"form-group\">';\n  content += '<p><label>Cover Type : </label><select id=\"coverType\">';\n  for (let i = 0 ; i < optsCover.length ; i++) {\n    content += `<option value='${i}'`;\n    content += `>${optsCover[i].name}</option>`;\n  }\n  content += '</select></p>';\n  content += '</div>';\n\n  return new Dialog({\n    title: \"Cover\",\n    content: content,\n    buttons: {\n      roll: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: \"Activate\",\n        callback: () => coveringUp = true,\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: \"Cancel\",\n        callback: () => coveringUp = false,\n      },\n    },\n    default: \"Activate\",\n    close: html => {\n        if (coveringUp) {\n            let chosenCover = optsCover[html.find('#coverType')[0].value];\n            activateCover(chosenCover.name);\n        }\n    }\n  });\n}\n\nasync function activateCover(chosenCover) {\n\n    let msgContent;\n    let myCover;\n    let takingCover = true;\n    let lesserCover = 'Compendium.pf2e.equipment-effects.lKkQvMzNG55Yhyef';\n    let standardCover = 'Compendium.pf2e.equipment-effects.I9lfZUiCwMiGogVi';\n    let greaterCover = 'Compendium.pf2e.equipment-effects.dlxrYwsliiZbsTYB';\n    let allCovers = [lesserCover, standardCover, greaterCover];\n    switch(chosenCover) {\n        case 'Clear':\n            var i;\n            for(i=0; i< allCovers.length; i++){\n                let item = await fromUuid(allCovers[i]);\n                let existing = actor.items.filter(j => j.type === item.type).find(e => e.name === item.name);\n                if (existing) {\n                    await token.actor.deleteEmbeddedDocuments('Item', [existing.id]);\n                }\n            }\n            msgContent = \"Clearing cover modifiers for \";\n            takingCover = false;\n            break;\n        case 'Lesser':\n            myCover = lesserCover;\n            msgContent = \"Granting lesser cover to \";\n            break;\n        case 'Standard':\n            myCover = standardCover;\n            msgContent = \"Granting standard cover to \";\n            break;\n        case 'Greater':\n            myCover = greaterCover;\n            msgContent = \"Granting greater cover to \";\n            break;\n        default:\n    }\n\n    \n    if (takingCover) {\n        const item = await fromUuid(myCover);\n        await token.actor.createEmbeddedDocuments('Item', [item.data]);    \n    }\n    \n    msgContent = msgContent + actor.data.name\n\n    let chatData = {\n        user: game.user.id,\n        content: msgContent,\n        whisper: [game.user.id],\n    };\n    ChatMessage.create(chatData, {});\n}\n\n\nCoverMacro()",
    "flags": {},
    "img": "systems/pf2e/icons/actions/OneAction.webp",
    "name": "Take Cover",
    "permission": {
        "default": 0
    },
    "scope": "global",
    "type": "script"
}
