{
    "_id": "4nEbRlo2cB9KkK7T",
    "author": "uAvrJeywnWLwQIhl",
    "command": "function checkFeat(slug) {\n    return !!token?.actor?.itemTypes.feat.some((i) => i.slug === slug);\n}\n\n// Stance: Mountain Stance\nconst ITEM_UUID = checkFeat(\"mountain-quake\")\n    ? \"Compendium.pf2e.feat-effects.wuERa7exfXXl6I37\"\n    : checkFeat(\"mountain-stronghold\")\n    ? \"Compendium.pf2e.feat-effects.LXbVcutEIW8eWZEz\"\n    : checkFeat(\"mountain-stance\")\n    ? \"Compendium.pf2e.feat-effects.gYpy9XBPScIlY93p\"\n    : null;\n\nif (token?.actor?.type !== \"character\") {\n    ui.notifications.error(\"PF2e System | Select exactly one player-character token.\");\n} else if (ITEM_UUID === null) {\n    ui.notifications.warn(`PF2e System | ${token.actor.name} does not have the Mountain Stance feat`);\n} else {\n    await applyEffect(ITEM_UUID);\n}\n\nasync function applyEffect(effectUUID) {\n    const { actor } = token;\n    const { itemTypes } = actor;\n    const existing = itemTypes.effect.find((e) => e.sourceId === effectUUID);\n    if (existing) {\n        await actor.deleteEmbeddedDocuments(\"Item\", [existing.id]);\n        return;\n    }\n\n    const effect = (await fromUuid(effectUUID)).toObject();\n    effect.flags.core = effect.flags.core ?? {};\n    effect.flags.core.sourceId = effect.flags.core.sourceId ?? effectUUID;\n\n    const clothing = itemTypes.armor.find((i) => i.slug === \"clothing-explorers\" && i.isEquipped);\n    const clothingBonus = clothing?.data.data.runes.potency ?? 0;\n    const bracers = itemTypes.equipment.find((i) => i.isInvested && i.slug.startsWith(\"bracers-of-armor-\"));\n    const bracersBonus = !bracers ? 0 : bracers.slug.endsWith(\"-i\") ? 1 : bracers.slug.endsWith(\"-ii\") ? 2 : 3;\n    const mageArmor = itemTypes.effect.find((i) => i.slug === \"spell-effect-mage-armor\");\n    const mageArmorBonus = !mageArmor ? 0 : mageArmor.level === 10 ? 3 : mageArmor.level >= 5 ? 2 : 1;\n\n    const itemBonus = Math.max(clothingBonus, bracersBonus, mageArmorBonus);\n    const rule = effect.data.rules.find((r) => r.selector === \"ac\" && r.key === \"FlatModifier\");\n    rule.value = rule.value + itemBonus;\n    await actor.createEmbeddedDocuments(\"Item\", [effect]);\n}",
    "flags": {},
    "img": "systems/pf2e/icons/features/feats/mountain-stance.webp",
    "name": "Toggle Mountain Stance",
    "permission": {
        "default": 1
    },
    "scope": "global",
    "type": "script"
}
