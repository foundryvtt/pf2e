{
    "_id": "wkGvmmH4WGCetdlB",
    "actorIds": [],
    "author": "M6L6STuBiXTluEz7",
    "command": "let applyChanges = false;\nconst compendiumName=\"pf2e.conditionitems\";\nconst conditionCompendium = game.packs.get(compendiumName);\nlet conditionList=[];\n\nasync function getConditionList(){\n    if(conditionList.length<=0){\n        let compendiumEntries = await conditionCompendium.getContent();\n        console.log(compendiumEntries);\n            for(let count=0;count<compendiumEntries.length;count++){\n                conditionList.push({\"UUID\": \"Compendium.\"+compendiumName+\".\"+compendiumEntries[count]._id,\"Name\": compendiumEntries[count].name});\n            }\n        }\n    return conditionList;\n}\n\nasync function optionList() {\n    let optionlist='';\n    const list=await getConditionList();\n    console.log(list);\n    for(let count=0;count<list.length;count++){\n        optionlist+='<option value=\"' + count + '\">'+ list[count].Name + '</option>';\n    }\n    console.log(optionlist);\n    return optionlist;\n}\n\nasync function applyCondition(conditionItem, applytype)\n{\n    const item = await fromUuid(conditionItem.UUID);\n    for (const token of canvas.tokens.controlled) {\n        let existing = token.actor.items.filter(i => i.type === item.type).find(e => e.name === item.name);\n        if(applytype==\"subtractive\" && existing){ \n            if(existing.data.data.value.isValued && existing.data.data.value.value>1){\n                const update = duplicate(existing);\n                update.data.value.value--;\n                await token.actor.updateEmbeddedEntity('OwnedItem', update);\n            }\n            else{\n                await token.actor.deleteOwnedItem(existing._id);\n            }\n        }\n        else if(existing && applytype==\"additive\" && existing.data.data.value.isValued){\n                const update = duplicate(existing);\n                update.data.value.value++;\n                await token.actor.updateEmbeddedEntity('OwnedItem', update);\n        } else if(!existing && applytype==\"additive\") {\n            const newCondition = PF2eConditionManager.getCondition(conditionItem.Name);\n            newCondition.data.sources.hud = !0,\n            await PF2eConditionManager.addConditionToToken(newCondition, token);\n        }\n        await PF2eConditionManager.processConditions(token);\n    }\n}\n\nnew Dialog({\n  title: `Apply Condition`,\n  content: `\n    <form>\n      <div class=\"form-group-stacked\">\n        <label>Condition:</label>\n        <select id=\"conditionChoice\" name=\"conditionChoice\">` + (await optionList()) + `\n        </select><div class=\"form-group\">\n        <input type=\"radio\" id=\"additive\" name=\"applyType\" value=\"additive\" checked=\"true\"/>\n        <label for=\"additive\">Add/Increment</label><BR/>\n        <input type=\"radio\" id=\"subtractive\" name=\"applyType\" value=\"subtractive\"/>\n        <label for=\"subtractive\">Remove/Decrement</label>\n        </div>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n      if (applyChanges) {\n          var applytype=\"additive\";\n        let conditionid = html.find('[name=\"conditionChoice\"]')[0].value;\n        let conditionItem=getConditionList()[conditionid];\n        const radios=html.find('[name=\"applyType\"]');\n        for(var count=0;count<radios.length;count++){\n            if(radios[count].checked){\n                applytype=radios[count].value;\n                break;\n            }\n        }\n        applyCondition(conditionItem,applytype);\n    }\n  }\n}).render(true);",
    "flags": {
        "furnace": {
            "runAsGM": false
        }
    },
    "img": "icons/svg/paralysis.svg",
    "name": "Apply Condition",
    "permission": {
        "default": 0
    },
    "scope": "global",
    "type": "script"
}
