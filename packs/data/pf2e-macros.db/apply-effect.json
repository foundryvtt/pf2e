{
    "_id": "SPGdMiAmctCDp4Om",
    "actorIds": [],
    "author": "M6L6STuBiXTluEz7",
    "command": "let applyChanges = false;\nconst compendiumName=\"pf2e.spell-effects\";\nconst effectCompendium = game.packs.get(compendiumName);\nlet effectList=[];\n\nfunction getEffectList(){\n    if(effectList.length<=0){\n        for(let count=0;count<effectCompendium.index.length;count++){\n            if(effectCompendium.index[count].name.indexOf('Spell Effect:')!=-1)\n                effectList.push({\"UUID\": \"Compendium.\"+compendiumName+\".\"+effectCompendium.index[count]._id,\"Name\": effectCompendium.index[count].name});\n        }\n    }\n    return effectList;\n}\n\nfunction optionList() {\n    let optionlist='';\n    const list=getEffectList();\n    for(let count=0;count<list.length;count++){\n        optionlist+='<option value=\"' + count + '\">'+ list[count].Name + '</option>';\n    }\n    return optionlist;\n}\n\nasync function applyEffect(effectItem)\n{\n    const item = await fromUuid(effectItem.UUID);\n    for (const token of canvas.tokens.controlled) {\n        let existing = token.actor.items.filter(i => i.type === item.type).find(e => e.name === item.name);\n        if (existing) {\n            await token.actor.deleteOwnedItem(existing._id);\n        } else {\n        await token.actor.createOwnedItem(item);\n        }\n    }\n}\n\nnew Dialog({\n  title: `Apply Effect`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Effect:</label>\n        <select id=\"effectChoice\" name=\"effectChoice\">` + optionList() + `\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n      if (applyChanges) {\n        let effectid = html.find('[name=\"effectChoice\"]')[0].value;\n        let effectItem=getEffectList()[effectid];\n        //console.log(effectItem);\n        applyEffect(effectItem);\n\n    }\n  }\n}).render(true);",
    "flags": {
        "furnace": {
            "runAsGM": false
        }
    },
    "img": "icons/svg/explosion.svg",
    "name": "Apply Effect",
    "permission": {
        "default": 0
    },
    "scope": "global",
    "type": "script"
}
