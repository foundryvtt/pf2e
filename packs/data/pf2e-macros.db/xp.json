{
    "_id": "MAHxEeGf31wqv3jp",
    "actorIds": [],
    "author": "oxKN2HrOvz2sSqlF",
    "command": "/**\n * This file uses JSDoc (see https://jsdoc.app/tags-type.html) to\n * at least somewhat get type safety and prevent easy typing mistakes\n *\n * Rules are implemented as described in https://2e.aonprd.com/Rules.aspx?ID=575\n * including the variant rules for proficiency without level https://2e.aonprd.com/Rules.aspx?ID=1371\n */\n\n/* global ui */\n/* global Dialog */\n\n// level without proficiency variant\n/** @type {Map<number, number>} */\nconst xpVariantCreatureDifferences = new Map();\nxpVariantCreatureDifferences.set(-7, 9);\nxpVariantCreatureDifferences.set(-6, 12);\nxpVariantCreatureDifferences.set(-5, 14);\nxpVariantCreatureDifferences.set(-4, 18);\nxpVariantCreatureDifferences.set(-3, 21);\nxpVariantCreatureDifferences.set(-2, 26);\nxpVariantCreatureDifferences.set(-1, 32);\nxpVariantCreatureDifferences.set(0, 40);\nxpVariantCreatureDifferences.set(1, 48);\nxpVariantCreatureDifferences.set(2, 60);\nxpVariantCreatureDifferences.set(3, 72);\nxpVariantCreatureDifferences.set(4, 90);\nxpVariantCreatureDifferences.set(5, 108);\nxpVariantCreatureDifferences.set(6, 135);\nxpVariantCreatureDifferences.set(7, 160);\n\n/** @type {Map<number, number>} */\nconst xpCreatureDifferences = new Map();\nxpCreatureDifferences.set(-4, 10);\nxpCreatureDifferences.set(-3, 15);\nxpCreatureDifferences.set(-2, 20);\nxpCreatureDifferences.set(-1, 30);\nxpCreatureDifferences.set(0, 40);\nxpCreatureDifferences.set(1, 60);\nxpCreatureDifferences.set(2, 80);\nxpCreatureDifferences.set(3, 120);\nxpCreatureDifferences.set(4, 160);\n\n// for some reason Paizo thought it was a good idea to give \n// simple hazards entirely different and incredibly small xp values\n/** @type {Map<number, number>} */\nconst xpSimpleHazardDifferences = new Map();\nxpSimpleHazardDifferences.set(-4, 2);\nxpSimpleHazardDifferences.set(-3, 3);\nxpSimpleHazardDifferences.set(-2, 4);\nxpSimpleHazardDifferences.set(-1, 6);\nxpSimpleHazardDifferences.set(0, 8);\nxpSimpleHazardDifferences.set(1, 12);\nxpSimpleHazardDifferences.set(2, 16);\nxpSimpleHazardDifferences.set(3, 24);\nxpSimpleHazardDifferences.set(4, 32);\n\n/**\n * @param partyLevel {number}\n * @param entityLevel {number}\n * @param values {Map<number, number>}\n * @returns {number}\n */\nfunction getXPFromMap(partyLevel, entityLevel, values) {\n    // add +1 to all levels to account for -1 levels\n    const difference = (entityLevel + 1) - (partyLevel + 1);\n    const range = Math.floor(values.size / 2);\n    const boundedDifference = Math.clamped(difference, 0 - range, range);\n    return values.get(boundedDifference);\n}\n\n/**\n * @param partyLevel {number}\n * @param npcLevel {number}\n * @returns {number}\n */\nfunction getCreatureXP(partyLevel, npcLevel) {\n    if (game.settings.get('pf2e', 'proficiencyVariant') === 'ProficiencyWithoutLevel') {\n        return getXPFromMap(partyLevel, npcLevel, xpVariantCreatureDifferences);\n    } else {\n        return getXPFromMap(partyLevel, npcLevel, xpCreatureDifferences);\n    }\n}\n\n/**\n * @typedef {{level: number, isComplex: boolean}} HazardLevel\n */\n\n/**\n * @param partyLevel {number}\n * @param hazard {HazardLevel}\n * @returns {number}\n */\nfunction getHazardXp(partyLevel, hazard) {\n    if (hazard.isComplex) {\n        return getCreatureXP(partyLevel, hazard.level);\n    } else {\n        return getXPFromMap(partyLevel, hazard.level, xpSimpleHazardDifferences);\n    }\n}\n\n/**\n * @typedef {{trivial, low, moderate, severe, extreme: number}} EncounterBudgets\n */\n\n/**\n * @param challenge {number}\n * @param budgets {EncounterBudgets}\n * @returns {string}\n */\nfunction getEncounterRating(challenge, budgets) {\n    if (challenge < budgets.low) {\n        return 'trivial';\n    } else if (challenge < budgets.moderate) {\n        return 'low';\n    } else if (challenge < budgets.severe) {\n        return 'moderate';\n    } else if (challenge < budgets.extreme) {\n        return 'severe';\n    } else {\n        return 'extreme';\n    }\n}\n\n/**\n * @typedef {{encounterBudgets: EncounterBudgets, rating: string, xp: number, challenge: number, partySize: number, partyLevel: number, budget: number}} XP\n */\n\n/**\n *\n * @param partyLevel {number}\n * @param partySize {number}\n * @param npcLevels {Array<number>}\n * @param hazards {Array<HazardLevel>}\n * @returns {XP}\n */\nfunction getXP(partyLevel, partySize, npcLevels, hazards) {\n    const budget = partySize * 20;\n    const creatureChallenge = npcLevels\n        .map(level => getCreatureXP(partyLevel, level))\n        .reduce((a, b) => a + b, 0);\n    const hazardChallenge = hazards\n        .map(hazard => getHazardXp(partyLevel, hazard))\n        .reduce((a, b) => a + b, 0);\n    const challenge = creatureChallenge + hazardChallenge;\n    const encounterBudgets = {\n        trivial: budget * .5,\n        low: budget * .75,\n        moderate: budget,\n        severe: budget * 1.5,\n        extreme: budget * 2,\n    };\n    const rating = getEncounterRating(challenge, encounterBudgets);\n    return {\n        partyLevel,\n        partySize,\n        budget,\n        challenge,\n        encounterBudgets,\n        rating,\n        xp: (challenge / partySize) * 4,\n    };\n}\n\n/**\n * @typedef {{data: {data: {details: {level: number|string|undefined|null, isComplex: boolean}}, type: string}}} Hazard\n */\n\n/**\n * @param actors {Array<Hazard>}\n * @param type {string}\n * @returns {Array<HazardLevel>}\n */\nfunction getHazardLevels(actors, type) {\n    return actors\n        .filter(a => a.data.type === type)\n        .map(a => {\n            return {\n                level: parseInt(a.data.data.details.level ?? 1, 10),\n                isComplex: a.data.data.details.isComplex ?? false,\n            };\n        });\n}\n\n/**\n * @typedef {{data: {data: {details: {level: {value: number|string|undefined|null}}}, type: string}}} Actor\n */\n\n/**\n * @param actors {Array<Actor>}\n * @param type {string}\n * @returns {Array<number>}\n */\nfunction getLevels(actors, type) {\n    return actors\n        .filter(a => a.data.type === type)\n        .map(a => parseInt(a.data.data.details.level.value ?? 1, 10));\n}\n\n/**\n * @param xp {XP}\n * @returns {string}\n */\nfunction dialogTemplate(xp) {\n    return `\n<h2>XP</h2>\n<table>\n    <tr>\n        <th>Party</th>\n        <td>PCs: ${xp.partySize} (Lv ${xp.partyLevel})</td>\n    </tr>\n    <tr>\n        <th>Rating</th>\n        <td>${xp.rating} (${Math.floor(xp.xp)} XP)</td>\n    </tr>\n    <tr>\n        <th>Total XP</th>\n        <td>PCs: ${Math.floor(xp.budget)} XP, NPCs & Hazards: ${Math.floor(xp.challenge)} XP</td>\n    </tr>\n</table>\n<h2>Budgets</h2>\n<table>\n    <tr>\n        <th>Trivial</th>\n        <td>${Math.floor(xp.encounterBudgets.trivial)} XP</td>\n    </tr>\n    <tr>\n        <th>Low</th>\n        <td>${Math.floor(xp.encounterBudgets.low)} XP</td>\n    </tr>\n    <tr>\n        <th>Moderate</th>\n        <td>${Math.floor(xp.encounterBudgets.moderate)} XP</td>\n    </tr>\n    <tr>\n        <th>Severe</th>\n        <td>${Math.floor(xp.encounterBudgets.severe)} XP</td>\n    </tr>\n    <tr>\n        <th>Extreme</th>\n        <td>${Math.floor(xp.encounterBudgets.extreme)} XP</td>\n    </tr>\n</table>`;\n}\n\nconst askLevelPopupTemplate = `\n<form>\n<div class=\"form-group\">\n    <label>Party Size</label>\n    <input id=\"party-size\" name=\"party-size\" type=\"number\" value=\"4\">\n</div>\n<div class=\"form-group\">\n    <label>Party level</label>\n    <input id=\"party-level\" name=\"party-level\" type=\"number\" value=\"1\">\n</div>\n</form>\n`;\n\n/**\n * @param partyLevel {number}\n * @param partySize {number}\n * @param npcLevels {Array<number>}\n * @param hazardLevels {Array<HazardLevel>}\n */\nfunction showXP(partyLevel, partySize, npcLevels, hazardLevels) {\n    const xp = getXP(partyLevel, partySize, npcLevels, hazardLevels);\n    new Dialog({\n        title: 'XP',\n        content: dialogTemplate(xp),\n        buttons: {},\n    }).render(true);\n}\n\n/**\n * @param npcLevels {Array<number>}\n * @param hazardLevels {Array<HazardLevel>}\n */\nfunction askPartyLevelAndSize(npcLevels, hazardLevels) {\n    new Dialog({\n        title: 'Party Information',\n        content: askLevelPopupTemplate,\n        buttons: {\n            no: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel'\n            },\n            yes: {\n                icon: '<i class=\"fas fa-calculator\"></i>',\n                label: 'Calculate XP',\n                callback: ($html) => {\n                    const partySize = parseInt($html[0].querySelector('[name=\"party-size\"]').value, 10) ?? 1;\n                    const partyLevel = parseInt($html[0].querySelector('[name=\"party-level\"]').value, 10) ?? 1;\n                    showXP(partyLevel, partySize, npcLevels, hazardLevels);\n                }\n            },\n        },\n        default: 'yes'\n    }).render(true);\n}\n\nfunction main() {\n    const actors = canvas.tokens.controlled\n        .map(a => a.actor);\n\n    const npcLevels = getLevels(actors, 'npc');\n    const pcLevels = getLevels(actors, 'character');\n    const hazardLevels = getHazardLevels(actors, 'hazard');\n\n    if (npcLevels.length === 0 && hazardLevels.length === 0) {\n        ui.notifications.error(`You must select at least one npc and/or hazard token and optionally all PC tokens`);\n        return;\n    }\n\n    if (pcLevels.length === 0) {\n        askPartyLevelAndSize(npcLevels, hazardLevels);\n    } else {\n        showXP(pcLevels[0], pcLevels.length, npcLevels, hazardLevels);\n    }\n}\n\nmain();",
    "flags": {
        "core": {
            "sourceId": "Macro.EWCgLvKsBoHTVEfv"
        }
    },
    "img": "systems/pf2e/icons/spells/athletic-rush.jpg",
    "name": "XP",
    "permission": {
        "default": 0
    },
    "scope": "global",
    "type": "script"
}
