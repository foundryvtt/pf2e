{
    "_id": "MAHxEeGf31wqv3jp",
    "actorIds": [],
    "author": "oxKN2HrOvz2sSqlF",
    "command": "/**\n * @typedef {{data: {data: {details: {level: number|string|undefined|null, isComplex: boolean}}, type: string}}} Hazard\n */\n\n/**\n * @param actors {Array<Hazard>}\n * @param type {string}\n * @returns {Array<HazardLevel>}\n */\nfunction getHazardLevels(actors, type) {\n    return actors\n        .filter((a) => a.data.type === type)\n        .map((a) => {\n            return {\n                level: parseInt(a.data.data.details.level ?? 1, 10),\n                isComplex: a.data.data.details.isComplex ?? false,\n            };\n        });\n}\n\n/**\n * @typedef {{data: {data: {details: {level: {value: number|string|undefined|null}}}, type: string}}} Actor\n */\n\n/**\n * @param actors {Array<Actor>}\n * @param type {string}\n * @returns {Array<number>}\n */\nfunction getLevels(actors, type) {\n    return actors.filter((a) => a.data.type === type).map((a) => parseInt(a.data.data.details.level.value ?? '1', 10));\n}\n\n/**\n * @param xp {XP}\n * @returns {string}\n */\nfunction dialogTemplate(xp) {\n    return `\n<h2>XP</h2>\n<table>\n    <tr>\n        <th>Party</th>\n        <td>PCs: ${xp.partySize} (Lv ${xp.partyLevel})</td>\n    </tr>\n    <tr>\n        <th>Rating</th>\n        <td>${xp.rating} (${xp.xpPerPlayer} XP)</td>\n    </tr>\n    <tr>\n        <th>Total XP</th>\n        <td>PCs: ${xp.encounterBudgets.moderate} XP, NPCs & Hazards: ${xp.totalXP} XP</td>\n    </tr>\n</table>\n<h2>Budgets</h2>\n<table>\n    <tr>\n        <th>Trivial</th>\n        <td>${xp.encounterBudgets.trivial} XP</td>\n    </tr>\n    <tr>\n        <th>Low</th>\n        <td>${xp.encounterBudgets.low} XP</td>\n    </tr>\n    <tr>\n        <th>Moderate</th>\n        <td>${xp.encounterBudgets.moderate} XP</td>\n    </tr>\n    <tr>\n        <th>Severe</th>\n        <td>${xp.encounterBudgets.severe} XP</td>\n    </tr>\n    <tr>\n        <th>Extreme</th>\n        <td>${xp.encounterBudgets.extreme} XP</td>\n    </tr>\n</table>`;\n}\n\nconst askLevelPopupTemplate = () => {\n    const partySize = parseInt(localStorage.getItem('xpMacroPartySize') ?? 4, 10);\n    const partyLevel = parseInt(localStorage.getItem('xpMacroPartyLevel') ?? 1, 10);\n    return `\n    <form>\n    <div class=\"form-group\">\n        <label>Party Size</label>\n        <input id=\"party-size\" name=\"party-size\" type=\"number\" value=\"${partySize}\">\n    </div>\n    <div class=\"form-group\">\n        <label>Party level</label>\n        <input id=\"party-level\" name=\"party-level\" type=\"number\" value=\"${partyLevel}\">\n    </div>\n    </form>\n    `;\n};\n\n/**\n * @param partyLevel {number}\n * @param partySize {number}\n * @param npcLevels {Array<number>}\n * @param hazardLevels {Array<HazardLevel>}\n */\nfunction showXP(partyLevel, partySize, npcLevels, hazardLevels) {\n    const xp = game.pf2e.gm.calculateXP(partyLevel, partySize, npcLevels, hazardLevels, {\n        proficiencyWithoutLevel: game.settings.get('pf2e', 'proficiencyVariant') === 'ProficiencyWithoutLevel',\n    });\n    new Dialog({\n        title: 'XP',\n        content: dialogTemplate(xp),\n        buttons: {},\n    }).render(true);\n}\n\n/**\n * @param npcLevels {Array<number>}\n * @param hazardLevels {Array<HazardLevel>}\n */\nfunction askPartyLevelAndSize(npcLevels, hazardLevels) {\n    new Dialog({\n        title: 'Party Information',\n        content: askLevelPopupTemplate,\n        buttons: {\n            no: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel',\n            },\n            yes: {\n                icon: '<i class=\"fas fa-calculator\"></i>',\n                label: 'Calculate XP',\n                callback: ($html) => {\n                    const partySize = parseInt($html[0].querySelector('[name=\"party-size\"]').value, 10) ?? 1;\n                    const partyLevel = parseInt($html[0].querySelector('[name=\"party-level\"]').value, 10) ?? 1;\n                    // persist for future uses\n                    localStorage.setItem('xpMacroPartySize', partySize);\n                    localStorage.setItem('xpMacroPartyLevel', partyLevel);\n                    showXP(partyLevel, partySize, npcLevels, hazardLevels);\n                },\n            },\n        },\n        default: 'yes',\n    }).render(true);\n}\n\nfunction main() {\n    const actors = canvas.tokens.controlled.map((a) => a.actor);\n\n    const npcLevels = getLevels(actors, 'npc');\n    const pcLevels = getLevels(actors, 'character');\n    const hazardLevels = getHazardLevels(actors, 'hazard');\n\n    if (npcLevels.length === 0 && hazardLevels.length === 0) {\n        ui.notifications.error(`You must select at least one npc and/or hazard token and optionally all PC tokens`);\n        return;\n    }\n\n    if (pcLevels.length === 0) {\n        askPartyLevelAndSize(npcLevels, hazardLevels);\n    } else {\n        showXP(pcLevels[0], pcLevels.length, npcLevels, hazardLevels);\n    }\n}\n\nmain();",
    "flags": {},
    "img": "systems/pf2e/icons/spells/athletic-rush.jpg",
    "name": "XP",
    "permission": {
        "default": 0
    },
    "scope": "global",
    "type": "script"
}
