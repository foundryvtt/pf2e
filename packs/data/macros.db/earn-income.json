{
    "_id": "mxHKWibjPrgfJTDg",
    "actorIds": [],
    "author": "ru9MkwAaWXaeSZph",
    "command": "function escapeHtml(html) {\n    const text = document.createTextNode(html);\n    const p = document.createElement('p');\n    p.appendChild(text);\n    return p.innerHTML;\n}\nfunction capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\nfunction isExperiencedProfessional(actor) {\n    return actor.data.items.some((item) => item.type === 'feat' && item.name === 'Experienced Professional');\n}\nfunction rankToProficiency(rank) {\n    if (rank === 0) {\n        return 'untrained';\n    } else if (rank === 1) {\n        return 'trained';\n    } else if (rank === 2) {\n        return 'expert';\n    } else if (rank === 3) {\n        return 'master';\n    } else {\n        return 'legendary';\n    }\n}\nfunction degreeOfSuccessLabel(degreeOfSuccessLabel) {\n    if (degreeOfSuccessLabel === 0) {\n        return 'Critical Failure';\n    } else if (degreeOfSuccessLabel === 1) {\n        return 'Failure';\n    } else if (degreeOfSuccessLabel === 2) {\n        return 'Success';\n    } else {\n        return 'Critical Success';\n    }\n}\nfunction coinsToString(coins, degreeOfSuccess) {\n    if (degreeOfSuccess === 'Critical Failure') {\n        return 'none';\n    } else {\n        return Object.entries(coins)\n            .map(([key, value]) => `${value} ${game.i18n.localize(CONFIG.PF2E.currencies[key])}`)\n            .join(', ');\n    }\n}\nfunction chatTemplate(skillName, earnIncomeResult) {\n    const degreeOfSuccess = degreeOfSuccessLabel(earnIncomeResult.degreeOfSuccess);\n    const payPerDay = escapeHtml(coinsToString(earnIncomeResult.rewards.perDay, degreeOfSuccess));\n    const combinedPay = escapeHtml(coinsToString(earnIncomeResult.rewards.combined, degreeOfSuccess));\n    const level = earnIncomeResult.level;\n    const daysSpentWorking = earnIncomeResult.daysSpentWorking;\n    const forDays =\n        daysSpentWorking > 1 ? `<p><strong>Salary for ${daysSpentWorking} days</strong> ${combinedPay}</p>` : '';\n    const successColor = earnIncomeResult.degreeOfSuccess > 1 ? 'darkgreen' : 'darkred';\n    const dc = earnIncomeResult.dc;\n    const roll = earnIncomeResult.roll;\n    return `\n    <div class=\"pf2e chat-card\">\n        <header class=\"card-header flexrow\">\n            <img src=\"systems/pf2e/icons/equipment/treasure/currency/gold-pieces.webp\" title=\"Income\" width=\"36\" height=\"36\">\n            <h3>Earn Income Level ${level}</h3>\n        </header>\n        <div class=\"card-content\">\n            <p><strong>Result</strong> <span style=\"color: ${successColor}\">${degreeOfSuccess} (DC: ${dc}, Roll: ${roll})</span></p>\n            <p><strong>Skill</strong> ${escapeHtml(skillName)}</p>\n            <p><strong>Salary per day</strong> ${payPerDay}</p>\n            ${forDays}\n        </div>\n    </div>\n    `;\n}\nfunction postToChat(skillName, earnIncomeResult) {\n    const content = chatTemplate(skillName, earnIncomeResult);\n    const chatData = {\n        user: game.user.id,\n        content,\n        speaker: ChatMessage.getSpeaker(),\n    };\n    ChatMessage.create(chatData, {});\n}\nfunction isProficiencyWithoutLevel() {\n    return game.settings.get('pf2e', 'proficiencyVariant') === 'ProficiencyWithoutLevel';\n}\nfunction calculateIncome(actor, skill, roll, level, days) {\n    const dcOptions = {\n        proficiencyWithoutLevel: isProficiencyWithoutLevel(),\n    };\n    const earnIncomeOptions = {\n        useLoreAsExperiencedProfessional: isExperiencedProfessional(actor) && skill.isLore,\n    };\n    const income = game.pf2e.actions.earnIncome(level, days, roll, skill.proficiency, earnIncomeOptions, dcOptions);\n    postToChat(skill.name, income);\n}\nfunction runEarnIncome(actor, skill, assurance, level, days) {\n    if (assurance) {\n        const actorLevel = actor.data.data.details?.level?.value ?? 1;\n        const proficiencyLevel = isProficiencyWithoutLevel() ? 0 : actorLevel;\n        const proficiencyBonus = proficiencyLevel + skill.rank * 2;\n        calculateIncome(actor, skill, { dieValue: 10, modifier: proficiencyBonus }, level, days);\n    } else {\n        const options = actor.getRollOptions(['all', 'skill-check', skill.name]);\n        options.push('earn-income');\n        game.pf2e.Check.roll(\n            new game.pf2e.CheckModifier(\n                '<span style=\"font-family: Pathfinder2eActions\">A</span> Earn Income',\n                actor.data.data.skills[skill.acronym],\n                [],\n            ),\n            { actor, type: 'skill-check', options },\n            event,\n            (roll) => {\n                const dieValue = roll.dice[0].results[0].result;\n                const modifier = roll._total - dieValue;\n                calculateIncome(actor, skill, { dieValue, modifier }, level, days);\n            },\n        );\n    }\n}\nfunction getSkills(actor) {\n    return (\n        Object.entries(actor.data.data.skills)\n            .map(([acronym, value]) => {\n                return {\n                    acronym,\n                    name: capitalize(value.name),\n                    isLore: value.lore === true,\n                    proficiency: rankToProficiency(value.rank),\n                    rank: value.rank,\n                };\n            })\n            // earn income is a trained action\n            .filter((skill) => skill.proficiency !== 'untrained')\n    );\n}\nfunction askSkillPopupTemplate(skills) {\n    const level = parseInt(localStorage.getItem('earnIncomeLevel') ?? 0, 10);\n    const days = parseInt(localStorage.getItem('earnIncomeDays') ?? 1, 10);\n    const skillAcronym = localStorage.getItem('earnIncomeSkillAcronym');\n    const assurance = localStorage.getItem('earnIncomeAssurance') === 'true';\n    return `\n    <form>\n    <div class=\"form-group\">\n        <label>Trained Skills/Lores</label>\n        <select name=\"skillAcronym\">\n            ${skills\n                .map(\n                    (skill) =>\n                        `<option value=\"${skill.acronym}\" ${\n                            skillAcronym === skill.acronym ? 'selected' : ''\n                        }>${escapeHtml(skill.name)}</option>`,\n                )\n                .join('')}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Use Assurance</label>\n        <input name=\"assurance\" type=\"checkbox\" ${assurance ? 'checked' : ''}>\n    </div>\n    <div class=\"form-group\">\n        <label>Level</label>\n        <select name=\"level\">\n            ${Array(21)\n                .fill(0)\n                .map((_, index) => `<option value=\"${index}\" ${index === level ? 'selected' : ''}>${index}</option>`)\n                .join('')}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Days</label>\n        <input type=\"number\" name=\"days\" value=\"${days}\">\n    </div>\n    </form>\n    `;\n}\nfunction showEarnIncomePopup(actor) {\n    if (actor === null || actor === undefined) {\n        ui.notifications.error(`You must select at least one PC`);\n    } else {\n        const skills = getSkills(actor);\n        new Dialog({\n            title: 'Earn Income',\n            content: askSkillPopupTemplate(skills),\n            buttons: {\n                no: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: 'Cancel',\n                },\n                yes: {\n                    icon: '<i class=\"fas fa-coins\"></i>',\n                    label: 'Earn Income',\n                    callback: ($html) => {\n                        const level = parseInt($html[0].querySelector('[name=\"level\"]').value, 10) ?? 1;\n                        const days = parseInt($html[0].querySelector('[name=\"days\"]').value, 10) ?? 1;\n                        const skillAcronym = $html[0].querySelector('[name=\"skillAcronym\"]').value;\n                        const assurance = $html[0].querySelector('[name=\"assurance\"]').checked;\n                        const skill = skills.find((skill) => skill.acronym === skillAcronym);\n                        localStorage.setItem('earnIncomeLevel', level);\n                        localStorage.setItem('earnIncomeDays', days);\n                        localStorage.setItem('earnIncomeSkillAcronym', skillAcronym);\n                        localStorage.setItem('earnIncomeAssurance', assurance);\n                        runEarnIncome(actor, skill, assurance, level, days);\n                    },\n                },\n            },\n            default: 'yes',\n        }).render(true);\n    }\n}\nshowEarnIncomePopup(actor);",
    "img": "systems/pf2e/icons/equipment/treasure/currency/gold-pieces.webp",
    "name": "Earn Income",
    "permission": {
        "default": 1
    },
    "scope": "global",
    "type": "script"
}
